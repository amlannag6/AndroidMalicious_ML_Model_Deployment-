# -*- coding: utf-8 -*-
"""Hybridanalysis_MaliciousActivity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hAiuz1rRt5BrbEj1sM-oWrKlkm6k4bw5
"""

from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import cohen_kappa_score
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
import torch
from sklearn import svm
from sklearn import tree
import pandas as pd
import pickle
import numpy as np
import seaborn as sns
import joblib
from sklearn.metrics import f1_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import average_precision_score
from sklearn.metrics import precision_recall_curve
import matplotlib.pyplot as plt
from sklearn.experimental import enable_iterative_imputer
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.svm import SVR
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,f1_score
from collections import Counter
from imblearn.over_sampling import SMOTE
from sklearn.metrics import brier_score_loss
from sklearn.metrics import roc_auc_score
from sklearn.feature_selection import SelectKBest 
from sklearn.feature_selection import chi2

import pandas as pd

data = pd.read_csv('https://raw.githubusercontent.com/amlannag6/AndroidMalicious_ML_Model_Deployment-/main/Prepared_DataSets/Dataset100_labled_fullTest.csv')

data.fillna(0)

data.columns

##encoding
from sklearn import preprocessing

le = preprocessing.LabelEncoder()
le.fit(data['Class'])
data['Class'] = le.transform(data['Class'])
print(data['Class'])

data.Class.value_counts()

data.isna().sum()

data.describe()

plt.figure(figsize = (100,50))  
sns.heatmap(data.corr(),annot = True , cmap = 'coolwarm' );

#sns.pairplot(data , diag_kind = 'kde');

data=data.drop(["abortBroadcast","ACCESS_SURFACE_FLINGER","ACCOUNT_MANAGER","ADD_VOICEMAIL","android.content.Context.registerReceiver","android.content.Context.unregisterReceiver","android.content.pm.PackageInfo","android.content.pm.Signature","android.intent.action.ACTION_POWER_CONNECTED","android.intent.action.ACTION_POWER_DISCONNECTED","android.intent.action.BATTERY_LOW",
                "android.intent.action.BATTERY_OKAY"
                ,"android.intent.action.BOOT_COMPLETED"
                ,"android.intent.action.CALL"
                ,"android.intent.action.CALL_BUTTON",
                "android.intent.action.NEW_OUTGOING_CALL"
                ,"android.intent.action.PACKAGE_DATA_CLEARED"
                ,"android.intent.action.SCREEN_ON"
                ,"android.intent.action.SEND",
                "android.intent.action.SEND_MULTIPLE"
                ,"android.intent.action.SENDTO","android.intent.action.TIME_SET"
                ,"android.intent.action.TIMEZONE_CHANGED","android.telephony.gsm.SmsManager"
                ,"android.telephony.SmsManager","attachInterface","BIND_ACCESSIBILITY_SERVICE"
                ,"BIND_APPWIDGET","BIND_INPUT_METHOD","BIND_REMOTEVIEWS","BIND_TEXT_SERVICE"
                ,"BIND_VPN_SERVICE","BROADCAST_SMS","BROADCAST_WAP_PUSH","CALL_PRIVILEGED"
                ,"CHANGE_COMPONENT_ENABLED_STATE","CHANGE_CONFIGURATION","CHANGE_NETWORK_STATE"
                ,"CHANGE_WIFI_MULTICAST_STATE","CHANGE_WIFI_STATE","CLEAR_APP_USER_DATA"
                ,"CONTROL_LOCATION_UPDATES","createSubprocess","defineClass","divideMessage"
                ,"DUMP","findClass","getBinder","getCallingPid","getCallingUid","GLOBAL_SEARCH","HARDWARE_TEST"
                ,"HttpGet.init","HttpPost.init","HttpUriRequest","INSTALL_LOCATION_PROVIDER","intent.action.RUN","INTERNAL_SYSTEM_WINDOW"
                ,"IRemoteService","java.lang.Class.cast","java.lang.Class.getCanonicalName","java.lang.Class.getDeclaredClasses"
                ,"java.lang.Class.getDeclaredField","java.lang.Class.getField","java.lang.Class.getMethod","java.lang.Class.getMethods","java.lang.Class.getPackage","java.lang.Class.getResource","java.net.URLDecoder","javax.crypto.Cipher","javax.crypto.spec.SecretKeySpec","KeySpec","MASTER_CLEAR","MessengerService","MODIFY_PHONE_STATE","MOUNT_FORMAT_FILESYSTEMS","PathClassLoader","Process.start","ProcessBuilder","READ_FRAME_BUFFER","READ_LOGS","READ_SOCIAL_STREAM","READ_USER_DICTIONARY","RECEIVE_BOOT_COMPLETED","RECEIVE_MMS","RECEIVE_WAP_PUSH","Runtime.getRuntime","Runtime.load","Runtime.loadLibrary","SecretKey","sendDataMessage","sendMultipartTextMessage","ServiceConnection","SET_ACTIVITY_WATCHER","SET_ORIENTATION","SET_PREFERRED_APPLICATIONS","SET_PROCESS_LIMIT","SET_TIME","SET_TIME_ZONE","SUBSCRIBED_FEEDS_READ","SUBSCRIBED_FEEDS_WRITE","System.loadLibrary","TelephonyManager.getCallState","TelephonyManager.getDeviceId","TelephonyManager.getLine1Number","TelephonyManager.getNetworkOperator","TelephonyManager.getSimCountryIso","TelephonyManager.getSimOperator","TelephonyManager.getSimSerialNumber","TelephonyManager.isNetworkRoaming","UPDATE_DEVICE_STATS","URLClassLoader","WRITE_CALENDAR","WRITE_PROFILE","WRITE_SOCIAL_STREAM","WRITE_USER_DICTIONARY" ],axis=1)

data.columns

X,y=data.iloc[:,2:90].astype("int"), data.Class.astype("int")
chi_scores = chi2(X,y)
p_values = pd.Series(chi_scores[1],index = X.columns)
p_values.sort_values(ascending = False , inplace = True)
p_values.plot.bar()

scaler = preprocessing.RobustScaler()
scaledData = scaler.fit_transform(data.iloc[:,1:91])
scaledData = pd.DataFrame(scaledData, columns=['SEND_SMS', 'READ_PHONE_STATE', 'GET_ACCOUNTS',
       'RECEIVE_SMS', 'READ_SMS', 'USE_CREDENTIALS', 'MANAGE_ACCOUNTS',
       'WRITE_SMS', 'READ_SYNC_SETTINGS', 'AUTHENTICATE_ACCOUNTS',
       'WRITE_HISTORY_BOOKMARKS', 'INSTALL_PACKAGES', 'CAMERA',
       'WRITE_SYNC_SETTINGS', 'READ_HISTORY_BOOKMARKS', 'INTERNET',
       'RECORD_AUDIO', 'NFC', 'ACCESS_LOCATION_EXTRA_COMMANDS',
       'WRITE_APN_SETTINGS', 'READ_PROFILE', 'MODIFY_AUDIO_SETTINGS',
       'READ_SYNC_STATS', 'BROADCAST_STICKY', 'WAKE_LOCK', 'RESTART_PACKAGES',
       'BLUETOOTH', 'READ_CALENDAR', 'READ_CALL_LOG', 'READ_EXTERNAL_STORAGE',
       'ACCESS_NETWORK_STATE', 'WRITE_CALL_LOG', 'DELETE_PACKAGES',
       'GET_TASKS', 'DELETE_CACHE_FILES', 'REORDER_TASKS', 'SET_WALLPAPER',
       'PROCESS_OUTGOING_CALLS', 'BIND_WALLPAPER', 'BATTERY_STATS',
       'ACCESS_COARSE_LOCATION', 'WRITE_SETTINGS', 'REBOOT', 'BLUETOOTH_ADMIN',
       'BIND_DEVICE_ADMIN', 'WRITE_GSERVICES', 'KILL_BACKGROUND_PROCESSES',
       'SET_ALARM', 'STATUS_BAR', 'PERSISTENT_ACTIVITY', 'CALL_PHONE',
       'FLASHLIGHT', 'MOUNT_UNMOUNT_FILESYSTEMS', 'SYSTEM_ALERT_WINDOW',
       'EXPAND_STATUS_BAR', 'WRITE_CONTACTS', 'DISABLE_KEYGUARD',
       'ACCESS_MOCK_LOCATION', 'GET_PACKAGE_SIZE', 'CLEAR_APP_CACHE',
       'READ_CONTACTS', 'DEVICE_POWER', 'ACCESS_WIFI_STATE',
       'WRITE_EXTERNAL_STORAGE', 'ACCESS_FINE_LOCATION', 'SET_WALLPAPER_HINTS',
       'WRITE_SECURE_SETTINGS', 'transact', 'onServiceConnected',
       'bindService', 'android.os.Binder', 'ClassLoader', 'DexClassLoader',
       'TelephonyManager.getSubscriberId,', 'java.lang.Object.getClass',
       'java.lang.Class.forName', 'android.intent.action.PACKAGE_REPLACED',
       'Binder', 'IBinder', 'android.os.IBinder',
       'android.intent.action.PACKAGE_REMOVED',
       'android.intent.action.PACKAGE_ADDED', 'PackageInstaller',
       'java.lang.Class.getClasses', 'android.intent.action.PACKAGE_CHANGED',
       'Runtime.exec,', 'onBind', 'Context.bindService',
       'android.intent.action.PACKAGE_RESTARTED',
       'android.intent.action.SET_WALLPAPER'])

X_train, X_test, y_train, y_test = train_test_split(scaledData.iloc[:,1:91], data.Class.astype("str"), test_size=0.30, random_state=10)

y1_test=y_test.astype("int64")

#MCC
def mcc(y_true,y_pred):
    tn, fp, fn, tp = confusion_matrix(y_true,y_pred).ravel()
    n=(tp*tn)-(fp*fn)
    d=((tp+fp)*(fn+tn)*(fp+tn)*(tp+fn))
    d=d**0.5
    r=n/d
    return r

#R square
def r2(y_true,y_pred):
    m_t_v=np.mean(y_true)
    numerator=0
    denominator=0
    for yt,yp in zip(y_true,y_pred):
        numerator +=(yt-yp)**2
        denominator +=(yt-m_t_v)**2
    r=numerator/denominator
    return 1-r

def scoreset(y_true,y_pred):
    score_set=[]
    pred=y_pred
    y_test=y_true
    print("cohen kappa score",cohen_kappa_score(y_test, pred))
    score_set.append(cohen_kappa_score(y_test, pred))
    print("cohen kappa score quadratic",cohen_kappa_score(y_test, pred, weights="quadratic"))
    score_set.append(cohen_kappa_score(y_test, pred, weights="quadratic"))
    print("R square score", r2(y_test,pred))
    score_set.append(r2(y_test,pred))
    print("MCC score", mcc(y_test,pred))
    score_set.append(mcc(y_test,pred))
    print("Brier Score Loss",brier_score_loss(y_test, pred))
    score_set.append(brier_score_loss(y_test, pred))
    print("AUC ROC Score",roc_auc_score(y_test, pred))
    score_set.append(roc_auc_score(y_test, pred))
    print("")
    print("accuracy:",accuracy_score(y_test,pred))
    score_set.append(accuracy_score(y_test,pred))
    print("F1 Score:",f1_score(y_test,pred))
    score_set.append(f1_score(y_test,pred))
    print("Precision:",precision_score(y_test,pred))
    score_set.append(precision_score(y_test,pred))
    print("Recall:",recall_score(y_test,pred))
    score_set.append(recall_score(y_test,pred))
    return score_set

#LinearSVM
from sklearn import svm

lin_clf = svm.LinearSVC()
lin_clf.fit(X_train, y_train)
pred = lin_clf.predict(X_test)
pred=pred.astype("int64")
## accuracy
s=scoreset(y1_test,pred)
#print(s

gnb = GaussianNB()
gnb.fit(X_train, y_train)
pred = gnb.predict(X_test)

pred=pred.astype("int64")

s=scoreset(y1_test,pred)

# kneighbors algorithm

for i in range(3,15,3):
    
    neigh = KNeighborsClassifier(n_neighbors=i)
    neigh.fit(X_train, y_train)
    pred = neigh.predict(X_test)
    pred=pred.astype("int64")
    # accuracy
    accuracy = accuracy_score(pred, y1_test)
    print("kneighbors {}".format(i))
    s=scoreset(y1_test,pred)

rdF=RandomForestClassifier(n_estimators=250, max_depth=50,random_state=10)
rdF.fit(X_train,y_train)
pred=rdF.predict(X_test)
cm=confusion_matrix(y_test, pred)

accuracy = accuracy_score(y_test,pred)
print(rdF)
print(accuracy)
print(classification_report(y_test,pred, labels=None))
print("cohen kappa score")
print(cohen_kappa_score(y_test, pred))
print(cm)
pred=pred.astype("int64")
s=scoreset(y1_test,pred)

import xgboost as xgb

xgb_clf = xgb.XGBClassifier()
xgb_clf = xgb_clf.fit(X_train, y_train)
pred=xgb_clf.predict(X_test)
cm=confusion_matrix(y_test, pred)

accuracy = accuracy_score(y_test,pred)
print(accuracy)
print(classification_report(y_test,pred, labels=None))
print("cohen kappa score")
print(cohen_kappa_score(y_test, pred))
print(cm)
pred=pred.astype("int64")
s=scoreset(y1_test,pred)

from sklearn.ensemble import AdaBoostClassifier
# Create adaboost classifer object
abc = AdaBoostClassifier(n_estimators=50,
                         learning_rate=1.3)#vary the learning rate from 0 to 1.5
# Train Adaboost Classifer
model = abc.fit(X_train, y_train)

#Predict the response for test dataset
pred = model.predict(X_test)
cm=confusion_matrix(y_test, pred)

accuracy = accuracy_score(y_test,pred)
print(accuracy)
print(classification_report(y_test,pred, labels=None))
print("cohen kappa score")
print(cohen_kappa_score(y_test, pred))
print(cm)
pred=pred.astype("int64")
s=scoreset(y1_test,pred)

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0).fit(X_train, y_train)
pred=clf.predict(X_test)
# predModel=ref.predict(X_test)


#cm=confusion_matrix(y1_test, pred)

#accuracy = accuracy_score(y1_test,pred)
#print(accuracy)
#print(classification_report(y1_test,pred, labels=None))
pred=pred.astype("int64")
s=scoreset(y1_test,pred)

#Neural network module
from keras.models import Sequential 
from keras.layers import Dense,Activation,Dropout 
#tensorflow
from keras.utils import np_utils

# create model
model = Sequential()
model.add(Dense(14, input_dim=10, kernel_initializer='uniform', activation='relu'))
model.add(Dense(12, kernel_initializer='uniform', activation='relu'))
model.add(Dense(8, kernel_initializer='uniform', activation='relu'))
model.add(Dense(1, kernel_initializer='uniform', activation='sigmoid'))
# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()